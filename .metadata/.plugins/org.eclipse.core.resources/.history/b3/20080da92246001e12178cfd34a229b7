package aaa.controll;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.net.URLEncoder;
import java.util.List;
import java.util.regex.Pattern;

import org.springframework.context.annotation.Configuration;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import aaa.model.BoardDTO;
import aaa.model.PageData;
import aaa.model.UploadData;
import aaa.service.BoardMapper;
import jakarta.annotation.Resource;
import jakarta.servlet.ServletOutputStream;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Controller
@RequestMapping("/board")
public class BoardController {
	
	@Resource
	BoardMapper mapper;
	
	@RequestMapping("list")
	String list(Model mm, @RequestParam(name = "pageNum", defaultValue = "1") int pageNum,
			@RequestParam(name = "perPage", defaultValue = "10") int perPage) {
		
		List<BoardDTO> data = mapper.listWithPaging((pageNum - 1) * perPage, perPage);
		System.out.println(data);
		mm.addAttribute("mainData", data);
		
		PageData pageData = new PageData();
		pageData.setPageNum(pageNum);
		pageData.setPerPage(perPage);
		
		int totalRecords = mapper.getTotalRecordCount();
		int totalPages = (int) Math.ceil((double) totalRecords / perPage);
		pageData.setTotalPages(totalPages);
		mm.addAttribute("pageData", pageData);
		
		return "board/list";
	}
	
	@RequestMapping("detail/{id}")
	String detail(Model mm, @PathVariable int id) {
		
		mapper.addCount(id);
		
		
		mm.addAttribute("dto", mapper.detail(id));
		return "board/detail";
	}
	
	@GetMapping("insert")
	String insert(BoardDTO dto) {
		
		return "board/insertForm";
	}
	
	@PostMapping("insert")
	String insertReg(Model mm, BoardDTO dto, PageData pd, @RequestParam("mmff") MultipartFile mmff) {
		
		UploadData uploadData = new UploadData();
		uploadData.setFf2(mmff);
		fileSave2(uploadData);
		mm.addAttribute("mmff", uploadData.getFf2Name());
		
		mapper.insseerr(dto);
		pd.setMsg("작성되었습니다.");
		pd.setGoUrl("list");
		System.out.println(dto);
		
		return "board/alert";
	}
	
	@GetMapping("delete/{id}")
	String delete(@PathVariable int id) {
		
		return "board/deleteForm";
	}
	
	@PostMapping("delete/{id}")
	String deleteReg(BoardDTO dto, PageData pd) {
		
	
		pd.setMsg("삭제실패");
		pd.setGoUrl("/board/delete/"+dto.getId());
		
		int cnt = mapper.delettt(dto);
		System.out.println("deleteReg:"+cnt);
		if(cnt>0) {
			pd.setMsg("삭제되었습니다.");
			pd.setGoUrl("/board/list");
		}
		
		return "board/alert";
	}
	
	@GetMapping("modify/{id}")
	String modify(Model mm, @PathVariable int id) {
		
		mm.addAttribute("dto", mapper.detail(id));
		
		return "board/modifyForm";
	}
	
	@PostMapping("modify/{id}")
	String modifyReg(BoardDTO dto, PageData pd, @RequestParam("mmff") MultipartFile mmff) {
		
		UploadData uploadData = new UploadData();
		uploadData.setFf2(mmff);
		fileSave2(uploadData);
		
		pd.setMsg("수정실패");
		pd.setGoUrl("/board/modify/"+dto.getId());
		
		int cnt = mapper.modifffy(dto);
		System.out.println("modifyReg:"+cnt);
		if(cnt>0) {
			pd.setMsg("수정되었습니다.");
			pd.setGoUrl("/board/detail/"+dto.getId());
		}
		
		return "board/alert";
	}
	
	void fileSave2(UploadData ud) {
		ud.setMsg(null);
		//파일 업로드 유무 확인
		if(ud.getFf2().isEmpty()) {
			
			ud.setMsg("파일이 비었어");
			return;
		}
		
		String path = "C:\\green_project\\spring_work\\stsMvcProj\\src\\main\\webapp\\up";
		
		int dot = ud.getFf2().getOriginalFilename().lastIndexOf(".");
		String fDomain = ud.getFf2().getOriginalFilename().substring(0, dot);
		String ext = ud.getFf2().getOriginalFilename().substring(dot);
		
		//이미지인지 확인
		if(!Pattern.matches("[.](bmp|jpg|gif|png|jpeg)", ext.toLowerCase())) {
			
			ud.setMsg("이미지 파일이 아님");
			return;
		}
		
		ud.setFf2Name(fDomain+ext); 
		File ff = new File(path+"\\"+ud.getFf2Name());
		int cnt = 1;
		while(ff.exists()) {
			 
			ud.setFf2Name(fDomain+"_"+cnt+ext);
			ff = new File(path+"\\"+ud.getFf2Name());
			cnt++;
		}
		
		try {
			FileOutputStream fos = new FileOutputStream(ff);
			
			fos.write(ud.getFf2().getBytes());
			
			fos.close();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
}
