Exception  : 디버깅 해서 내눈으로 직접 보고 입증 

try~catch : 현재의 문제상태를 벗어나서 정상구도로 만들어 놓는것

에러 코드
100 :  Continue (클라이언트로부터 요청을 받았으며 나머지 정보를 계속 요청함)
200 : OK(요청이 성공적으로 수행되었음)
~300까지는 괜찮
403 : Forbidden (접근 금지. 관리자 페이지 접근 등을 차단하는 경우)
404 : Not found(요청한 페이지 없음)
500 : Interal server error(내부 서버 오류)

자바는 맨 마지막이 컴파일러 - 예를 들면 try~catch 가 오류 못잡으면
컴파일러가 잡아줌. 근데 컴파일러까지 못가게 톰캣이 서버방어 최대한 해야함

다중상속 : Interface

함수와 메서드의 차이 : 
함수를 호출하는 객체가 있는 경우 메서드 
함수를 호출하는 객체가 없는 경우 함수

자바는 객체만 생각함

static : 일반 함수와 달리 인스턴스화 시켜서 사용하는 것이 아닌, 
메모리에 올라가있는 상태의 함수를 가져가 쓰는 형태입니다.
자동적으로 호출됨.

Python : Java + C++ 합친 느낌

메인 메서드가 실행되는 2가지
내가 자바파일이어야함, public으로 받아야함

에러페이지 우선순위

page 내 try ~ catch 구문

page 디렉티브에서 지정한 errorPage

web.xml 에서 지정한 exception- type

web.xml에서 지정한 error-code

웹 컨테이너

ArithmeticException


오버로딩 : 동일한 클래스 내에서 같은 이름을 가진 메소드가 있더라도
매개변수의 개수 또는 타입이 다르면, 같은 이름을 사용해서 메소드를 
정의할 수 있다.
= 메소드의 이름이 같고, 매개변수의 개수나 타입이 달라야 한다.

오버라이딩 : 상속 관계에서 부모클래스에서 상속받은 메소드를 
자식클래스에서 재정의 하는 것. (다형성)
= 오버라이딩하고자 하는 메소드의 이름, 매개변수, 리턴 값이 
모두 같아야 한다.

오버라이딩 안되는 조건은 : static(생성시에 넣을수 없다), final(상수)
final static 함수는 선언시에만 값을 넣을 수 있다.

exception 사용하려면 
디렉티브 <%@ %> 쪽에 isErrorPage="true"를 넣어야 에러가 안남 .

web.xml 에서 코딩
<error-page>
	<error-code>500</error-code>
	<location>/excep/ex500.jsp</location>	
</error-page>

제어문  : 프로그램의 흐름을 제어하는 경우에 사용하는 실행문
- 조건문(if-구간에 의한 분기, switch- 값에 의한 분기),
반복문 (for (초기값, 조건값, 증가값) - 횟수가 정해져 있게 규칙성)
while - 횟수가 정해져 있지 않다. 불규칙
분기문을 사용해서 제어문종류. 
-점핑하거나 다시 되돌아온다-

제어문은 리턴 없어도됨.
연산자 - 연산 항을 재료를 가지고 계산하여 결과값을 돌려주는것. 리턴이 있다.

args - 임의의 개수의 인수(arguments)를 뜻합니다. 
여러 개의 인수를 받아서 "튜플"의 형태로 저장해줍니다.

ping www.naver.com -> www.naver.com 이것이 자바로 했을때 args로 들어온다.

args의 자료형이 스트링 배열 

이클립스는 자바 안깔려있어도 실행됨.

JRE 는 실행환경 - java runtime environment
JDK 는 개발환경 - java development kit



